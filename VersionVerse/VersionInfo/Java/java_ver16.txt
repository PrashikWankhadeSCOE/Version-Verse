As of my last knowledge update in September 2021, Java SE 16, also known as JDK 16, was a non-LTS (non-Long-Term Support) release of the Java Platform, Standard Edition. It was released on March 16, 2021. Non-LTS releases like Java SE 16 typically have a shorter support lifecycle compared to LTS releases and are intended for developers who want to experiment with new features and improvements.

Some of the notable features and enhancements introduced in Java SE 16 included:

1.Records (Standard Feature): Records, which were previewed in Java SE 14 and made standard in Java SE 16, simplify the creation of classes that are primarily used to store data. They automatically generate getter methods, `equals()`, `hashCode()`, and `toString()` methods based on the class's fields.

2.Pattern Matching for instanceof (Standard Feature): Pattern matching for `instanceof` and `switch` expressions, which were previewed in previous releases, became standard features in Java SE 16. These features enhance code readability and conciseness.

3.Strong encapsulation of JDK internals: This feature aimed to strengthen the encapsulation of internal APIs, making it more difficult for developers to accidentally use unsupported or internal APIs.

4.Foreign Function & Memory API (Incubator): The Foreign Function & Memory API, which was introduced as an incubator feature in Java SE 14, continued to be improved and refined in Java SE 16.

5.Unix-Domain Socket Channel (Incubator): The Unix-Domain Socket Channel, initially introduced in Java SE 15 as an incubator feature, was further enhanced in Java SE 16.

6.Deprecations and Removals: Java SE 16 included deprecations and removals of certain classes and features that were considered obsolete or no longer recommended.

7.New macOS rendering pipeline: Java SE 16 introduced a new rendering pipeline for macOS, which replaced the older Quartz pipeline and aimed to provide better graphics performance and compatibility.

It's important to note that Java SE 16, being a non-LTS release, had a limited support period. Developers who require long-term support and stability for their projects typically opt for LTS releases like Java SE 11 and Java SE 17.

Please keep in mind that Java releases and their features may have evolved beyond my last knowledge update in September 2021. I recommend checking the official Oracle or OpenJDK website for the most current information on Java releases and their features as of your current date in 2023.